#!/usr/bin/env python
# Copyright (C) 2019  Nexedi SA and Contributors.
#                     Kirill Smelkov <kirr@nexedi.com>
#
# This program is free software: you can Use, Study, Modify and Redistribute
# it under the terms of the GNU General Public License version 3, or (at your
# option) any later version, as published by the Free Software Foundation.
#
# You can also Link and Combine this program with other software covered by
# the terms of any of the Free Software licenses or any of the Open Source
# Initiative approved licenses and Convey the resulting work. Corresponding
# source of such a combination shall include the source code for all other
# software used.
#
# This program is distributed WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See COPYING file for full licensing terms.
# See https://www.nexedi.com/licensing for rationale and options.
""" `trun ...` - run `...` while testing pygolang

For example it is not possible to import sanitized libgolang if non-sanitized
python was used to start tests - it will fail with

    ImportError: /usr/lib/x86_64-linux-gnu/libtsan.so.0: cannot allocate memory in static TLS block

trun cares to run python with LD_PRELOAD set appropriately to /path/to/libtsan.so
"""

import os, sys

# env_append appends value to ${name} environment variable.
# the value is appended with " " separator.
def env_append(name, value):
    _ = os.environ.get(name, "")
    if _ != "":
        _ += " "
    os.environ[name] = _ + value


# if TSAN/ASAN detects a bug - make it fail loudly on the first bug
env_append("TSAN_OPTIONS", "halt_on_error=1")
env_append("ASAN_OPTIONS", "halt_on_error=1")

# try to import golang. If libgolang is compiled with a sanitizer this will fail with
#   ImportError: /usr/lib/x86_64-linux-gnu/libtsan.so.0: cannot allocate memory in static TLS block
# which we use to detect which library to LD_PRELOAD.
ld_preload = None
try:
    import golang
except ImportError as e:
    msg = e.args[0]
    if 'libtsan' in msg or 'libasan' in msg:
        ld_preload = msg.split()[0]
    else:
        raise
if ld_preload is not None:
    print 'LD_PRELOAD ->', ld_preload
    env_append("LD_PRELOAD", ld_preload)

# XXX test on darwin

os.execvp(sys.argv[1], sys.argv[1:])
